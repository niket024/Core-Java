Executors Frameworks:
-----------------------
The Java ExecutorService interface, java.util.concurrent.ExecutorService,
represents an asynchronous execution mechanism which is capable of executing tasks concurrently in the background. 
A thread pool is represented by an instance of the class ExecutorService.
With an ExecutorService, you can submit task that will be completed in the future.

Here are the type of thread pools you can create with the Executors class :

Single Thread Executor : A thread pool with only one thread. So all the submitted tasks will be executed sequentially. Method : Executors.newSingleThreadExecutor()
Cached Thread Pool : A thread pool that creates as many threads it needs to execute the task in parrallel. The old available threads will be reused for the new tasks. If a thread is not used during 60 seconds, it will be terminated and removed from the pool. Method : Executors.newCachedThreadPool()
Fixed Thread Pool : A thread pool with a fixed number of threads. If a thread is not available for the task, the task is put in queue waiting for an other task to ends. Method : Executors.newFixedThreadPool()
Scheduled Thread Pool : A thread pool made to schedule future task. Method : Executors.newScheduledThreadPool()
Single Thread Scheduled Pool : A thread pool with only one thread to schedule future task. Method : Executors.newSingleThreadScheduledExecutor()